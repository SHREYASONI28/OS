sjf peemptive
#include <stdio.h>

typedef struct {
    int id;
    int at;
    int bt;
    int rt;
} Proc;

int findShortestJob(Proc p[], int n, int current_time) {
    int shortest_job_index = -1;
    int shortest_job_bt = __INT_MAX__;
    for (int i = 0; i < n; i++) {
        if (p[i].at <= current_time && p[i].rt < shortest_job_bt && p[i].rt > 0) {
            shortest_job_index = i;
            shortest_job_bt = p[i].rt;
        }
    }
    return shortest_job_index;
}

void sjf_preemptive(Proc p[], int n) {
    int wt[n], tat[n];
    int total_time = 0;
    int completed = 0;

    while (completed < n) {
        int shortest = findShortestJob(p, n, total_time);
        if (shortest == -1) {
            total_time++;
            continue;
        }

        p[shortest].rt--;
        if (p[shortest].rt == 0) {
            completed++;
            wt[shortest] = total_time + 1 - p[shortest].at - p[shortest].bt;
            if (wt[shortest] < 0) {
                wt[shortest] = 0;
            }
            tat[shortest] = wt[shortest] + p[shortest].bt;
        }
        total_time++;
    }

    float avg_wt = 0, avg_tat = 0;
    for (int i = 0; i < n; i++) {
        avg_wt += wt[i];
        avg_tat += tat[i];
    }
    avg_wt /= n;
    avg_tat /= n;

    printf("\nPreemptive SJF Scheduling:\n");
    printf("ID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", p[i].id, p[i].at, p[i].bt, wt[i], tat[i]);
    }
    printf("Avg Waiting Time: %.2f\n", avg_wt);
    printf("Avg Turnaround Time: %.2f\n", avg_tat);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Proc p[n];
    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        p[i].id = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &p[i].at);
        printf("Burst Time: ");
        scanf("%d", &p[i].bt);
        p[i].rt = p[i].bt;
    }

    sjf_preemptive(p, n);

    return 0;
}

priority preemptive non preemptive

#include <stdio.h>

typedef struct {
    int id;
    int at;
    int bt;
    int priority;
    int rt;
} Proc;

void swap(Proc *a, Proc *b) {
    Proc temp = *a;
    *a = *b;
    *b = temp;
}

void sort_by_priority(Proc p[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].priority > p[j + 1].priority) {
                swap(&p[j], &p[j + 1]);
            }
        }
    }
}

void priority_preemptive(Proc p[], int n) {
    int wt[n], tat[n];
    int total_time = 0;
    int completed = 0;

    while (completed < n) {
        int highest_priority_index = -1;
        int highest_priority = -1;
        for (int i = 0; i < n; i++) {
            if (p[i].at <= total_time && p[i].priority > highest_priority && p[i].rt > 0) {
                highest_priority_index = i;
                highest_priority = p[i].priority;
            }
        }
        if (highest_priority_index == -1) {
            total_time++;
            continue;
        }

        p[highest_priority_index].rt--;
        if (p[highest_priority_index].rt == 0) {
            completed++;
            wt[highest_priority_index] = total_time + 1 - p[highest_priority_index].at - p[highest_priority_index].bt;
            if (wt[highest_priority_index] < 0) {
                wt[highest_priority_index] = 0;
            }
            tat[highest_priority_index] = wt[highest_priority_index] + p[highest_priority_index].bt;
        }
        total_time++;
    }

    float avg_wt = 0, avg_tat = 0;
    for (int i = 0; i < n; i++) {
        avg_wt += wt[i];
        avg_tat += tat[i];
    }
    avg_wt /= n;
    avg_tat /= n;

    printf("\nPreemptive Priority Scheduling:\n");
    printf("ID\tArrival Time\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", p[i].id, p[i].at, p[i].bt, p[i].priority, wt[i], tat[i]);
    }
    printf("Avg Waiting Time: %.2f\n", avg_wt);
    printf("Avg Turnaround Time: %.2f\n", avg_tat);
}

void priority_non_preemptive(Proc p[], int n) {
    int wt[n], tat[n];
    sort_by_priority(p, n);

    int total_time = p[0].at;
    for (int i = 0; i < n; i++) {
        wt[i] = total_time - p[i].at;
        if (wt[i] < 0) {
            wt[i] = 0;
            total_time = p[i].at;
        }
        tat[i] = wt[i] + p[i].bt;
        total_time += p[i].bt;
    }

    float avg_wt = 0, avg_tat = 0;
    for (int i = 0; i < n; i++) {
        avg_wt += wt[i];
        avg_tat += tat[i];
    }
    avg_wt /= n;
    avg_tat /= n;

    printf("\nNon-preemptive Priority Scheduling:\n");
    printf("ID\tArrival Time\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", p[i].id, p[i].at, p[i].bt, p[i].priority, wt[i], tat[i]);
    }
    printf("Avg Waiting Time: %.2f\n", avg_wt);
    printf("Avg Turnaround Time: %.2f\n", avg_tat);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Proc p[n];
    printf("Enter arrival time, burst time, and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        p[i].id = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &p[i].at);
        printf("Burst Time: ");
        scanf("%d", &p[i].bt);
        printf("Priority: ");
        scanf("%d", &p[i].priority);
        p[i].rt = p[i].bt;
    }

    priority_non_preemptive(p, n);
    priority_preemptive(p, n);

    return 0;
}
round robin

#include <stdio.h>
#include <stdbool.h>

void RoundRobin(int n, int pid[], int arrival[], int burst[], int quantum) {
    int remaining[n];
    int wait[n], turnaround[n], completion[n];
    int total_wait = 0, total_turnaround = 0;

    // Initialize remaining burst times and other arrays
    for (int i = 0; i < n; i++) {
        remaining[i] = burst[i];
        wait[i] = 0;
    }

    int currentTime = 0;
    bool done;

    do {
        done = true;
        for (int i = 0; i < n; i++) {
            if (arrival[i] <= currentTime && remaining[i] > 0) {
                done = false;
                if (remaining[i] > quantum) {
                    currentTime += quantum;
                    remaining[i] -= quantum;
                } else {
                    currentTime += remaining[i];
                    remaining[i] = 0;
                    completion[i] = currentTime;
                    turnaround[i] = completion[i] - arrival[i];
                    wait[i] = turnaround[i] - burst[i];
                    total_wait += wait[i];
                    total_turnaround += turnaround[i];
                }
            }
        }
    } while (!done);

    // Print results
    printf("PID\tArrival\tBurst\tCompletion\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\n", pid[i], arrival[i], burst[i], completion[i], wait[i], turnaround[i]);
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_wait / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround / n);
}

int main() {
    int n = 4; // Number of processes
    int pid[] = {1, 2, 3, 4}; // Process IDs
    int arrival[] = {0, 1, 2, 3}; // Arrival times
    int burst[] = {5, 3, 8, 6}; // Burst times
    int quantum = 2; // Time quantum

    RoundRobin(n, pid, arrival, burst, quantum);
    return 0;
}

